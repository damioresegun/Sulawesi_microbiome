taxtablee = paste(rowData(JCSData)[,6], rowData(JCSData)[,7])
rownames(JCSData) <- taxtablee
length(rowData(JCSData)$Phylum)
# save the abundances and taxa to file
write.csv(meltAssay(JCSData, add_row_data = TRUE,
add_col_data = TRUE,
abund_values = "Abundance"),
paste0(outputFolder, "/All_Classification.csv"),
row.names = FALSE)
AllAbund1 <- plotAbundanceDensity(JCSData, layout = "jitter", abund_values = "Abundance",
n = as.integer(length(JCSData)), point_size=1,
point_shape=19, point_alpha=0.7, colour_by="Exp_Number") +
theme(legend.position = "bottom") +
scale_x_log10(label=scales::percent)
AllAbund2 <- plotAbundanceDensity(JCSData, layout = "jitter", abund_values = "Abundance",
n = as.integer(length(JCSData)), point_size=1,
point_shape=19, point_alpha=0.7, colour_by="Location") +
theme(legend.position = "bottom") +
scale_x_log10(label=scales::percent)
png(paste0(outputFolder, "/All_Dataset_Abundance.png"), width=4500, height=3200, units = "px", res=300)
AllAbund1
dev.off()
png(paste0(outputFolder, "/All_Dataset_Abundance_Location.png"), width=4500, height=3200, units = "px", res=300)
AllAbund2
dev.off()
# plot top 40 abundant species
png(paste0(outputFolder, "/Top40_AllData_Abundance.png"),width = 4500, height = 3200, res=300, units="px")
plotAbundanceDensity(JCSData, layout = "point", abund_values="Abundance",
n = 40, colour_by="Exp_Number", point_alpha=0.9) +
scale_x_log10(label=scales::percent) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
dev.off()
png(paste0(outputFolder, "/Top40_AllData_Abundance_Location.png"),width = 4500, height = 3200, res=300, units="px")
plotAbundanceDensity(JCSData, layout = "point", abund_values="Abundance",
n = 40, colour_by="Location", point_alpha=0.9) +
scale_x_log10(label=scales::percent) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
dev.off()
rownames(JCSData) <- orig_names
rownames(JCSData)
# add a taxonomic tree
JCSData <- addTaxonomyTree((JCSData))
cat("Taxonomic tree has been generated from the taxonomic features\n")
# convert data object to a phyloseq object
JCSData <- makePhyloseqFromTreeSummarizedExperiment(JCSData)
# define a function to select an outgroup to root the tree
pick_new_outgroup <- function(tree.unrooted){
# tablify parts of tree that is needed
treeDT <- cbind(data.table(tree.unrooted$edge),
data.table(length = tree.unrooted$edge.length)
)[1:Ntip(tree.unrooted)] %>%
cbind(data.table(id = tree.unrooted$tip.label))
# Take the longest terminal branch as outgroup
new.outgroup <- treeDT[which.max(length)]$id
return(new.outgroup)
}
# choose the root
outgroupID <- pick_new_outgroup(phy_tree(JCSData))
taxtablee <- as.data.frame(tax_table(JCSData))
taxtablee <- tibble::rownames_to_column(taxtablee, "ID")
outgroup = paste((taxtablee[grep(outgroupID, taxtablee$ID),][,7]),
(taxtablee[grep(outgroupID, taxtablee$ID),])[,8], sep = " ")
cat("The randomly chosen outgroup is ", outgroup, "\n")
# root the tree
phy_tree(JCSData) <- ape::root(phy_tree(JCSData), outgroup = outgroupID, resolve.root = TRUE)
cat("Taxonomic tree has been successfully rooted using the outgroup:", outgroup, "\n")
# check if there are empty features
summary(JCSData@tax_table@.Data=="")
# remove empty, uncharacterised or N.A entries in the taxa features
JCSData <- subset_taxa(JCSData, !is.na(Phylum) & !Phylum %in% c("", "uncharacterised", "uncharacterized"))
JCSData <- subset_taxa(JCSData, !is.na(Class) & !Class %in% c("", "uncharacterised", "uncharacterized"))
JCSData <- subset_taxa(JCSData, !is.na(Family) & !Family %in% c("", "uncharacterised", "uncharacterized"))
JCSData <- subset_taxa(JCSData, !is.na(Order) & !Order %in% c("", "uncharacterised", "uncharacterized"))
JCSData <- subset_taxa(JCSData, !is.na(Genus) & !Genus %in% c("", "uncharacterised", "uncharacterized"))
JCSData <- subset_taxa(JCSData, !is.na(Species) & !Species %in% c("", "uncharacterised", "uncharacterized"))
# check that they are all false
summary(JCSData@tax_table@.Data=="")
##############################################################################################################################
#                                                      SIMPLE METRICS                                                        #
##############################################################################################################################
# fix the names on the rownames on the taxa and otu table
taxx <- paste(JCSData@tax_table@.Data[,6], JCSData@tax_table@.Data[,7], sep=" ")
# Get the number of reads for each sample
pol = sample_sums(JCSData)
cat("The number of reads for", sample_names(JCSData), "are:", sample_sums(JCSData), "respectively\n")
# add the number of reads back to  the sample metadata in the data object
sample_data(JCSData)$Read_Count <- sample_sums(JCSData)
cat("The number of reads for each sample has been added to the data object.\n")
# Get the total number of reads for each taxa feature across all samples
taxa_sums(JCSData)
# save it to file
taxSums <- data.frame(taxa_sums(JCSData))
rownames(taxSums) <- taxx
colnames(taxSums) <- "Total Number of reads for each species across all samples"
write.csv(taxSums,
paste0(outputFolder,"/Reads_per_taxa.csv"),
row.names=TRUE)
# get the number of reads per sample per taxa feature
otuTab <- as.data.frame(otu_table(JCSData), row.names = taxx)
write.csv(otuTab,
paste0(outputFolder, "/Reads_per_sample_per_taxa.csv"),
row.names = TRUE)
# get the number of identified features
cat("The number of features in each kingdom is:\n")
table(tax_table(JCSData)[,"Kingdom"])
cat("The number of features in each phylum is:\n")
table(tax_table(JCSData)[,"Phylum"], exclude = NULL)
# save to file # the frequency is the number of taxa in that kingdom/phylum
write.csv(table(data.frame(tax_table(JCSData)[,"Kingdom"])),
paste0(outputFolder, "/KingdomFeatureCount.csv"),
row.names = FALSE)
write.csv(table(data.frame(tax_table(JCSData)[,"Phylum"])),
paste0(outputFolder, "/PhylumFeatureCount.csv"),
row.names = FALSE)
# Plot absolute abundance of taxa
(plot1 <- plot_bar(JCSData, fill = "Phylum") +
geom_bar(aes(color = Phylum, fill = Phylum), stat = "identity", position = "stack") +
labs(x = "", y = "Absolute Abundance\n (Reads)\n") +
facet_wrap(~Location, scales = "free", nrow = 1) +
theme(legend.position = "bottom")+
theme(axis.text.x = element_text(angle = 15, hjust=0.5))+
theme(legend.text = element_text(size=10))+
theme(legend.title = element_text(size=12)))
# save to file
if (outImg == "tiff"){
tiff(paste0(outputFolder,"/Taxonomy_AbsoluteAbundance.tif"),
width=3000, height=2000, units = "px", res=300)
print(plot1)
dev.off()
} else if (outImg == "png") {
png(paste0(outputFolder,"/Taxonomy_AbsoluteAbundance.png"),
width=5000, height=3000, units = "px", res=300)
print(plot1)
dev.off()
}
cat("The total number of reads for each identified taxa across all samples are saved in Reads_per_taxa.csv \n")
cat("The total number of reads for each identified taxa in each sample are saved in Reads_per_sample_per_taxa.csv \n")
cat("The total number of taxa/species in the Kingdom taxonomic classification strata are saved in KingdomFeatureCount.csv \n")
cat("The total number of taxa/species in the Phylum taxonomic classification strata are saved in PhylumFeatureCount.csv \n")
cat("The absolute abundance of the samples using read counts is plotted in Taxonomy_AbsoluteAbundance.png \n")
##############################################################################################################################
#                                    COMPUTE PREVALENCE AND FILTER IF POSSIBLE                                               #
##############################################################################################################################
# Compute the prevalence of each feature across the samples
JCSDataPrevalence <- apply(X = otu_table(JCSData),
MARGIN = ifelse(taxa_are_rows(JCSData), yes = 1, no = 2),
FUN = function(x){sum(x > 0)})
# convert to dataframe
JCSDataPrevalence <- data.frame(Prevalence = JCSDataPrevalence,
TotalAbundance = taxa_sums(JCSData),
tax_table(JCSData))
# bind the taxonomy to the prevalence
JCSDataPrevalence <- cbind(Taxa = taxx, JCSDataPrevalence)
#rownames(JCSDataPrevalence) <- 1:nrow(JCSDataPrevalence) # works but is problematic downstream. So deactivated for now
# save the prevalence information
write.csv(JCSDataPrevalence,
paste0(outputFolder, "/Prevalence_of_all_Taxa.csv"),
row.names = FALSE)
cat("The prevalence of each identified taxa has been saved in 'Prevalence_of_all_Taxa.csv'.\n")
cat("Prevalence refers to the number of samples each taxa was identified in.\n")
# check for phyla of low prevalence features by computing the average % prevalence
# and total prevalence of the phyla across all samples
JCSDataPrevalence_Avg <- plyr::ddply(JCSDataPrevalence, "Phylum",
function(df){cbind(mean(df$Prevalence),
sum(df$Prevalence))})
colnames(JCSDataPrevalence_Avg) <- c("Phylum", "Avg.Prevalence", "Total.Prevalence")
# write to file. This is showing the average number of samples each phylum appears in (Avg.Prevalence) and the total number of
# features associated with that phylum for all samples it appears in (Total Prevalence)
write.csv(JCSDataPrevalence_Avg,
paste0(outputFolder, "/Average_Prevalence_perPhylum.csv"),
row.names = FALSE)
cat("The average prevalence per phylum has been saved to file.\n")
# plot prevalence and total abundance i.e. this plot show the number of reads and the number of samples found that support each
# identified phylum
(plot2 <- ggplot(JCSDataPrevalence, aes(TotalAbundance, Prevalence/nsamples(JCSData), color = Phylum)) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) + geom_point(size = 2, alpha = 0.3) +
scale_x_log10() + xlab("Total Abundance/Read count") + ylab("Proportional Prevalence") +
facet_wrap(~Phylum) + theme(legend.position = "none") +
labs(caption = "Total number of reads (Total Abundance) plotted against the proportion of samples that support each identified phylum.
As such, if a phylum is supported in all samples, the prevalence will be 1.
Proportional prevalence is calculated by dividing the prevalence of each phylum by the total number of samples.",
subtitle="Proportional prevalence vs Read count plotted for identified Phyla"))
if (outImg == "tiff"){
tiff(paste0(outputFolder, "/Prevalence_TotalAbundance.tif"),
width=4000, height=4000, units = "px", res=300)
print(plot2)
dev.off()
} else if (outImg == "png") {
png(paste0(outputFolder, "/Prevalence_TotalAbundance.png"),
width=4000, height=4000, units = "px", res=300)
print(plot2)
dev.off()
}
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
AllAbund1
png(paste0(outputFolder, "/All_Dataset_Abundance.png"), width=4500, height=3200, units = "px", res=300)
AllAbund1
dev.off()
png(paste0(outputFolder, "/All_Dataset_Abundance_Location.png"), width=4500, height=3200, units = "px", res=300)
AllAbund2
dev.off()
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
AllAbund1 <- plotAbundanceDensity(JCSData, layout = "jitter",
abund_values = "Abundance",
n = as.integer(length(JCSData)),
point_size=1,
point_shape=19,
point_alpha=0.7, colour_by="Exp_Number") +
theme(legend.position = "bottom") +
scale_x_log10(label=scales::percent)
AllAbund1 <- plotAbundanceDensity(JCSData, layout = "jitter",
abund_values = "Abundance",
n = as.integer(length(JCSData)),
point_size=1,
point_shape=19,
point_alpha=0.7, colour_by="Exp_Number") +
theme(legend.position = "bottom") +
scale_x_log10(label=scales::percent)
AllAbund2 <- plotAbundanceDensity(JCSData, layout = "jitter",
abund_values = "Abundance",
n = as.integer(length(JCSData)), point_size=1,
point_shape=19, point_alpha=0.7, colour_by="Location") +
theme(legend.position = "bottom") +
scale_x_log10(label=scales::percent)
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
# filter out low prevalent taxonomic features. Prevalence threshold is 10% of all samples
keepTaxa = rownames(JCSDataPrevalence)[(JCSDataPrevalence$Prevalence >= (0.1 * nsamples(JCSData)))]
if (length(keepTaxa) == length(rownames(JCSDataPrevalence))) {
cat("No taxonomic features were filtered because all features are supported at least", 0.1*nsamples(JCSData), "of samples.\n")
cat("This means that all features pass the (0.1 * sample_count) threshold \n")
JCSData_Filtered = JCSData
} else if (length(keepTaxa) < length(rownames(JCSDataPrevalence))) {
cat("Some taxonomic features are not supported by the threshold number of samples. \n These will be filtered out for low prevalence")
# filter out the low prevalent taxa
JCSData_Filtered = prune_taxa(keepTaxa, JCSData)
# compute prevalence of the filtered taxonomies
JCSDataPrevalence_Filt = apply(X = otu_table(JCSData_Filtered),
MARGIN = ifelse(taxa_are_rows(JCSData_Filtered), yes = 1, no =2),
FUN = function(x){sum(x > 0)})
# convert to dataframe
JCSDataPrevalence_Filt <- data.frame(Prevalence = JCSDataPrevalence_Filt,
TotalAbundance = taxa_sums(JCSData_Filtered),
tax_table(JCSData_Filtered))
# bind the taxonomy to the prevalence
filt_taxx <- paste(JCSData_Filtered@tax_table@.Data[,6], JCSData_Filtered@tax_table@.Data[,7], sep=" ")
JCSDataPrevalence_Filt <- cbind(Taxa = filt_taxx, JCSDataPrevalence_Filt)
#rownames(JCSDataPrevalence_Filt) <- 1:nrow(JCSDataPrevalence_Filt)
# save the prevalence information
write.csv(JCSDataPrevalence_Filt, "Filtered_Prevalence_of_all_Taxa.csv", row.names = FALSE)
cat("After filtering, the features that passed the threshold have been saved in Filtered_Prevalence_of_all_Taxa.csv.\n")
cat("This means the features to be removed were supported by less than", 0.1*nsamples(JCSData), "of samples.\n")
cat("The filtered dataset will be taken forward.\n")
# plot the abundance of the filtered taxa
(plot3 <- ggplot(JCSDataPrevalence_Filt, aes(TotalAbundance, Prevalence/nsamples(JCSData_Filtered), color = Phylum)) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) + geom_point(size = 2, alpha = 0.3) +
scale_x_log10() + xlab("Total Abundance/Read count") + ylab("Proportional Prevalence") +
facet_wrap(~Phylum) + theme(legend.position = "none") +
labs(caption = "Total number of reads (Total Abundance) plotted against the proportion of samples that support each identified phylum after filtering for prevalence.
Prevalence filtering threshold was calculated by excluding any taxonomic features supported by <5% of samples.
After filtering, if a phylum is supported in all remaining samples, the prevalence will be 1.
Proportional prevalence is calculated by dividing the prevalence of each phylum by the total number of samples.",
subtitle="Filtered prevalence vs Read count plotted for identified Phyla"))
if (outImg == "tiff"){
tiff("Filtered_Prevalence_TotalAbundance.tif", width=3000, height=2000, units = "px", res=300)
print(plot3)
dev.off()
} else if (outImg == "png") {
png("Filtered_Prevalence_TotalAbundance.png", width=3000, height=2000, units = "px", res=300)
print(plot3)
dev.off()
}
}
##############################################################################################################################
#                                                   AGGLOMERATE TO GENUS LEVEL                                               #
##############################################################################################################################
# check how many taxa would remain after agglomeration filtering
cat("After agglomertation filtering, the identified taxa will be reduced to", length(get_taxa_unique(JCSData_Filtered, taxonomic.rank = "Genus")), "genus genera\n")
cat("After agglomertation filtering, the identified taxa will be reduced to", length(get_taxa_unique(JCSData_Filtered, taxonomic.rank = "Phylum")), "phylum genera\n")
# agglomerate data to the genus level
JCSData_Genus <- tax_glom(JCSData_Filtered, "Genus", NArm = TRUE)
JCSData_Phylum <- tax_glom(JCSData_Filtered, "Phylum", NArm = TRUE)
cat("The data has been collapsed to just the identified genuses. This is done as a means of reducing the amount of data we are processing\n")
cat("Note that the original identified species still remain, they have just been combined to be their parent genus\n")
# Plot the tree of the pre and post agglomeration data object
(plot4 = plot_tree(JCSData_Filtered, ladderize = "left", color = "Kingdom",
base.spacing=0.03, plot.margin=0.2,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(subtitle = "Pre-Agglomeration"))
(plot5 = plot_tree(JCSData_Genus, ladderize = "left", color = "Kingdom",
base.spacing=0.03, plot.margin=0.2,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(subtitle = "Post-Agglomeration by Genus"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="samples",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",base.spacing=0.04, plot.margin=0.4,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
if (outImg == "tiff"){
tiff("Pre_and_Post_Agglomeration_ByGenus_byPhylum.tif", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
} else if (outImg == "png") {
png("Pre_and_Post_Agglomeration_ByGenus_byPhylum.png", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
}
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Kingdom",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",base.spacing=0.04, plot.margin=0.4,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Kingdom",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",base.spacing=0.5, plot.margin=0.4,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
if (outImg == "tiff"){
tiff("Pre_and_Post_Agglomeration_ByGenus_byPhylum.tif", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
} else if (outImg == "png") {
png("Pre_and_Post_Agglomeration_ByGenus_byPhylum.png", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
}
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Kingdom",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Kingdom",
label.tips = "Phylum", size = "abundance",
base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Kingdom",
label.tips = "Genus", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Samples",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
if (outImg == "tiff"){
tiff("Pre_and_Post_Agglomeration_ByGenus_byPhylum.tif", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
} else if (outImg == "png") {
png("Pre_and_Post_Agglomeration_ByGenus_byPhylum.png", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
}
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.9, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=1.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
if (outImg == "tiff"){
tiff("Pre_and_Post_Agglomeration_ByGenus_byPhylum.tif", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
} else if (outImg == "png") {
png("Pre_and_Post_Agglomeration_ByGenus_byPhylum.png", width=5000, height=4000, units = "px", res=300)
combp <- plot_grid(plot4, plot5,plot6, labels = c("A", "B", "C"), label_y = 0.9)
print(combp)
dev.off()
}
5
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.9,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=5,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.2,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank,
sizebase = 10) +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank,
justify = "jagged") +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank,
justify = "right") +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank,
justify = "jitter") +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
(plot6 = plot_tree(JCSData_Phylum, ladderize = "left", color ="Exp_Number",
label.tips = "Phylum", shape = "Kingdom", size = "abundance",
base.spacing=0.5, plot.margin=0.5,nodelabf=nodeplotblank,
justify = "left") +
theme(plot.title = element_text(size = 15))+
labs(caption = "Visual representation of taxonomic trees of identified before and after agglomeration. [A] Pre agglomeration, 4062 species
were identified while after agglomerating to the Genus level [B], the species were collapsed to their constituent 1137 genuses.
A further agglomeration to the Phylum level [C] results in 33 phyla identified, with the absolute abundance (or read counts)
also shown in the size of the coloured labels. All trees are rooted using a randomly picked species in the identified taxa -- ",
subtitle = "Post agglomeration by Phylum"))
source("C:/Users/dro/Dropbox/Work/MacLaptop/JCS_Project/Pipeline/Sulawesi_microbiome/UpdatedMicroAnalysis/MicrobiomeAnalysis.R")
